generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Usuários do sistema
model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(Colaborador)
  createdAt DateTime @default(now())

  groups GroupCompanies[] @relation("UserGroup")
}

/// Funções de usuário
enum Role {
  Admin
  Coordenador
  Colaborador
}

/// Grupos de empresas, para controle de permissões e agrupamento
model GroupCompanies {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())

  users     User[]    @relation("UserGroup")
  companies Company[] @relation("CompanyGroup")
}

/// Empresas do sistema
model Company {
  id        String   @id @default(uuid())
  name      String
  cnpj      String   @unique
  planOfCountsAgrocontar Boolean @default(true)
  createdAt DateTime @default(now())

  groups     GroupCompanies[] @relation("CompanyGroup")
  balancetes BalanceteData[]
  config     ConfigCompany[]
  mappings   ConfigMapping[]
  NotasExplicativas NotasExplicativas[]
}

/// Dados de balancete enviados pelos clientes, serão normalizados usando o de/para
model BalanceteData {
  id                String   @id @default(uuid())
  uploadedAt        DateTime @default(now())
  referenceDate     Int
  accountingAccount String   @db.VarChar(10) // código do cliente
  accountName       String   // nome da conta do cliente
  previousBalance   Decimal  @db.Decimal(20, 2)
  debit             Decimal  @db.Decimal(20, 2)
  credit            Decimal  @db.Decimal(20, 2)
  monthBalance      Decimal  @db.Decimal(20, 2)
  currentBalance    Decimal  @db.Decimal(20, 2)

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // Indexes para otimizar consultas
  @@index([companyId, referenceDate])
  @@index([referenceDate])
  @@index([accountingAccount])
  @@index([companyId, accountingAccount, referenceDate])
}

/// Layout de contas do cliente, cadastrado antes do de/para
model ConfigCompany {
  id                Int     @id @default(autoincrement())
  accountingAccount String  @db.VarChar(10)
  accountName       String
  companyId         String
  company           Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  // RELAÇÃO DEVE ESTAR DEFINIDA AQUI
  ConfigMapping     ConfigMapping[]

  @@unique([companyId, accountingAccount])
}

model ConfigMapping {
  id              Int @id @default(autoincrement())
  companyId       String
  company         Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyAccount  String
  defaultAccountId Int
  defaultAccount   ConfigTemplate @relation(fields: [defaultAccountId], references: [id])

  // RELAÇÃO INVERSA
  configCompany   ConfigCompany @relation(fields: [companyId, companyAccount], references: [companyId, accountingAccount])

  @@unique([companyId, companyAccount])
}

/// Layout padrão do sistema, único e compartilhado por todas as empresas
model ConfigTemplate {
  id                Int     @id @default(autoincrement())
  accountingAccount String  @db.VarChar(10)
  accountName       String
  createdAt         DateTime @default(now())

  ConfigMapping ConfigMapping[]
}

model DreTemplate {
  id                Int     @id @default(autoincrement())
  name              String  
  group             DreGroup
  accountingAccounts String[] 
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([group])
}

/// Grupos do DRE
enum DreGroup {
  RECEITAS_LIQUIDAS
  CUSTOS
  DESPESAS_OPERACIONAIS
  RESULTADO_FINANCEIRO
  IMPOSTOS
}

model BalancoTemplate {
  id                Int     @id @default(autoincrement())
  name              String  
  group             BalancoGroup
  accountingAccounts String[] 
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([group])
}

/// Grupos do balanço patrimonial
enum BalancoGroup {
  ATIVO_CIRCULANTE
  ATIVO_NAO_CIRCULANTE
  PASSIVO_CIRCULANTE
  PASSIVO_NAO_CIRCULANTE
  PATRIMONIO_LIQUIDO
}


model NotasExplicativas {
  id          String   @id @default(uuid())
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  number      Int      // Número da nota (1, 2, 3, etc.)
  title       String   // Título da nota (ex: "Informações Gerais")
  content     String   // Conteúdo da nota em texto

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tabelas     TabelaDemonstrativa[]

  // Garante que cada empresa tenha apenas uma nota por número
  @@unique([companyId, number])
  
  // Index para otimizar consultas
  @@index([companyId])
  @@index([number])
}


model TabelaDemonstrativa {
  id           String   @id @default(uuid())
  notaId       String
  nota         NotasExplicativas @relation(fields: [notaId], references: [id], onDelete: Cascade)
  
  conta        String   // Nome da conta
  anoAnterior  Float?   // Valor do ano anterior
  anoAtual     Float?   // Valor do ano atual
  
  ordem        Int      // Ordem de exibição na tabela
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([notaId])
  @@index([ordem])
}